{
    "parserOptions": {
        "ecmaVersion": 6,
        "sourceType": "module",
        "ecmaFeatures": {
            "globalReturn": true,                      // allow return statements in the global scope
            "impliedStrict ": true,                    // enable global strict mode
            "jsx": true                                // enable JSX
        }
    },

    "env": {
        "browser": true,     // browser global variables
        "es6": true,     // es6 global variables
        "node": true,        // Node.js global variables and Node.js-specific rules
        "amd": false,         // defines require() and define() as global variables as per the amd spec
        "mocha": false,       // adds all of the Mocha testing global variables
        "jasmine": false,     // adds all of the Jasmine testing global variables for version 1.3 and 2.0
        "phantomjs": false,   // phantomjs global variables
        "jquery": false,      // jquery global variables
        "prototypejs": false, // prototypejs global variables
        "shelljs": false      // shelljs global variables
    },

    "parser": "babel-eslint",

    "globals": {
        "document": false,
        "navigator": false,
        "window": false,
        "escape": false,
        "unescape": false,
        "describe": true,
        "before": true,
        "it": true,
        "expect": true,
        "sinon": true
    },

    "plugins": [
        "babel"
    ],

    "rules": {
        ////////// Possible Errors //////////
        "comma-dangle": [2, { "arrays": "never", "objects": "never", "imports": "never", "exports": "never", "functions": "ignore" }], // disallow trailing commas in object literals
        "no-cond-assign": 0,           // disallow assignment in conditional expressions
        "no-console": 0,               // disallow use of console (off by default in the node environment)
        "no-constant-condition": 0,    // disallow use of constant expressions in conditions
        "no-control-regex": 0,         // disallow control characters in regular expressions
        "no-debugger": 0,              // disallow use of debugger
        "no-dupe-args": 2,             // disallow duplicate arguments in functions
        "no-dupe-keys": 2,             // disallow duplicate keys when creating object literals
        "no-duplicate-case": 2,        // disallow a duplicate case label
        "no-empty-character-class": 2, // disallow the use of empty character classes in regular expressions
        "no-empty": 2,                 // disallow empty statements
        "no-ex-assign": 2,             // disallow assigning to the exception in a catch block
        "no-extra-boolean-cast": 2,    // disallow double-negation boolean casts in a boolean context
        "no-extra-parens": 0,          // disallow unnecessary parentheses (off by default)
        "no-extra-semi": 2,            // disallow unnecessary semicolons
        "no-func-assign": 0,           // disallow overwriting functions written as function declarations
        "no-inner-declarations": 0,    // disallow function or variable declarations in nested blocks
        "no-invalid-regexp": 0,        // disallow invalid regular expression strings in the RegExp constructor
        "no-irregular-whitespace": 0,  // disallow irregular whitespace outside of strings and comments
        "no-negated-in-lhs": 0,        // disallow negation of the left operand of an in expression
        "no-obj-calls": 0,             // disallow the use of object properties of the global object (Math and JSON) as functions
        "no-regex-spaces": 0,          // disallow multiple spaces in a regular expression literal
        "no-reserved-keys": 0,         // disallow reserved words being used as object literal keys (off by default)
        "no-sparse-arrays": 0,         // disallow sparse arrays
        "no-unreachable": 0,           // disallow unreachable statements after a return, throw, continue, or break statement
        "use-isnan": 0,                // disallow comparisons with the value NaN
        "valid-jsdoc": 0,              // Ensure JSDoc comments are valid (off by default)
        "valid-typeof": 0,             // Ensure that the results of typeof are compared against a valid string
        "no-unexpected-multiline": 0,  // Avoid code that looks like two expressions but is actually one (off by default)

        ////////// Best Practices //////////

        "accessor-pairs": 0,        // enforces getter/setter pairs in objects (off by default)
        "block-scoped-var": 0,      // treat var statements as if they were block scoped (off by default)
        "complexity": 0,            // specify the maximum cyclomatic complexity allowed in a program (off by default)
        "consistent-return": 0,     // require return statements to either always or never specify values
        "curly": [2, "multi-or-nest", "consistent"],                 // specify curly brace conventions for all control statements
        "default-case": 0,          // require default case in switch statements (off by default)
        "dot-notation": 0,          // encourages use of dot notation whenever possible
        "dot-location": 0,          // enforces consistent newlines before or after dots (off by default)
        "eqeqeq": 0,                // require the use of === and !==
        "guard-for-in": 0,          // make sure for-in loops have an if statement (off by default)
        "no-alert": 0,              // disallow the use of alert, confirm, and prompt
        "no-caller": 0,             // disallow use of arguments.caller or arguments.callee
        "no-div-regex": 0,          // disallow division operators explicitly at beginning of regular expression (off by default)
        "no-else-return": 0,        // disallow else after a return in an if (off by default)
        "no-empty-label": 0,        // disallow use of labels for anything other then loops and switches
        "no-eq-null": 0,            // disallow comparisons to null without a type-checking operator (off by default)
        "no-eval": 0,               // disallow use of eval()
        "no-extend-native": 0,      // disallow adding to native types
        "no-extra-bind": 0,         // disallow unnecessary function binding
        "no-fallthrough": 0,        // disallow fallthrough of case statements
        "no-floating-decimal": 0,   // disallow the use of leading or trailing decimal points in numeric literals (off by default)
        "no-implied-eval": 0,       // disallow use of eval()-like methods
        "no-iterator": 0,           // disallow usage of __iterator__ property
        "no-labels": 0,             // disallow use of labeled statements
        "no-lone-blocks": 0,        // disallow unnecessary nested blocks
        "no-loop-func": 0,          // disallow creation of functions within loops
        "no-multi-spaces": 0,       // disallow use of multiple spaces
        "no-multi-str": 0,          // disallow use of multiline strings
        "no-native-reassign": 0,    // disallow reassignments of native objects
        "no-new-func": 0,           // disallow use of new operator for Function object
        "no-new-wrappers": 0,       // disallows creating new instances of String, Number, and Boolean
        "no-new": 0,                // disallow use of new operator when not part of the assignment or comparison
        "no-octal-escape": 0,       // disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
        "no-octal": 0,              // disallow use of octal literals
        "no-param-reassign": 0,     // disallow reassignment of function parameters (off by default)
        "no-process-env": 0,        // disallow use of process.env (off by default)
        "no-proto": 0,              // disallow usage of __proto__ property
        "no-redeclare": 0,          // disallow declaring the same variable more then once
        "no-return-assign": 0,      // disallow use of assignment in return statement
        "no-script-url": 0,         // disallow use of javascript: urls
        "no-self-compare": 0,       // disallow comparisons where both sides are exactly the same (off by default)
        "no-sequences": 0,          // disallow use of comma operator
        "no-throw-literal": 0,      // restrict what can be thrown as an exception (off by default)
        "no-unused-expressions": 0, // disallow usage of expressions in statement position
        "no-void": 0,               // disallow use of void operator (off by default)
        "no-warning-comments": 0,   // disallow usage of configurable warning terms in comments, e.g. TODO or FIXME (off by default)
        "no-with": 0,               // disallow use of the with statement
        "radix": 0,                 // require use of the second argument for parseInt() (off by default)
        "vars-on-top": 0,           // requires to declare all vars on top of their containing scope (off by default)
        "wrap-iife": 0,             // require immediate function invocation to be wrapped in parentheses (off by default)
        "yoda": 0,                  // require or disallow Yoda conditions

        ////////// Strict Mode //////////

        "strict": 0,          // controls location of Use Strict Directives

        ////////// Variables //////////

        "no-catch-shadow": 0,             // disallow the catch clause parameter name being the same as a variable in the outer scope (off by default in the node environment)
        "no-delete-var": 0,               // disallow deletion of variables
        "no-label-var": 0,                // disallow labels that share a name with a variable
        "no-shadow": 0,                   // disallow declaration of variables already declared in the outer scope
        "no-shadow-restricted-names": 0,  // disallow shadowing of names such as arguments
        "no-undef": 0,                    // disallow use of undeclared variables unless mentioned in a /*global */ block
        "no-undef-init": 0,               // disallow use of undefined when initializing variables
        "no-undefined": 0,                // disallow use of undefined variable (off by default)
        "no-unused-vars": 0,              // disallow declaration of variables that are not used in the code
        "no-use-before-define": 0,        // disallow use of variables before they are defined

        ////////// Stylistic Issues //////////

        "array-bracket-spacing": [2, "never"],       // enforce spacing inside array brackets (off by default)
        "brace-style": 2,                 // enforce one true brace style (off by default)
        "comma-spacing": [2, { "before": false, "after": true }],               // enforce spacing before and after comma
        "comma-style": 2,                 // enforce one true comma style (off by default)
        "computed-property-spacing": [2, "never"],   // require or disallow padding inside computed properties (off by default)
        "consistent-this": [2, "self"],             // enforces consistent naming when capturing the current execution context (off by default)
        "func-call-spacing": [2, "never"], // require or disallow spacing between function identifiers and their invocations
        "indent": [2, 4],                      // this option sets a specific tab width for your code (off by default)
        "key-spacing": [2, { "beforeColon": false, "afterColon": true }],                 // enforces spacing between keys and values in object literal properties
        "keyword-spacing": [2, { "overrides": { "if": { "after": false }, "for": { "after": false }, "while": { "after": false }, "from": { "after": true }, "switch": { "after": false } } }], // enforce consistent spacing before and after keywords
        "lines-around-directive": [2, { "before": "never", "after": "always" }], // require or disallow newlines around directives
        "new-cap": [2, { "newIsCap": true }],                     // require a capital letter for constructors
        "new-parens": 2,                  // disallow the omission of parentheses when invoking a constructor with no arguments
        "no-lonely-if": 2,                // disallow if as the only statement in an else block (off by default)
        "no-mixed-spaces-and-tabs": 2,    // disallow mixed spaces and tabs for indentation
        "no-multiple-empty-lines": [2, { "max": 1 }],     // disallow multiple empty lines (off by default)
        "no-nested-ternary": 2,           // disallow nested ternary expressions (off by default)
        "no-trailing-spaces": 2,          // disallow trailing whitespace at the end of lines
        "operator-assignment": [2, "always"],         // require assignment operator shorthand where possible or prohibit it entirely (off by default)
        "operator-linebreak": [2, "none"],          // enforce operators to be placed before or after line breaks (off by default)
        "padded-blocks": [2, "never"],               // enforce padding within blocks (off by default)
        "quote-props": [2, "as-needed", { "numbers": true }],                 // require quotes around object literal property names (off by default)
        // "quotes": [2, "single", { "avoidEscape": true }],                      // specify whether double or single quotes should be used
        "semi-spacing": [2, { "before": false, "after": true }],                // enforce spacing before and after semicolons
        "semi": [2, "always"],                        // require or disallow use of semicolons instead of ASI
        "space-before-blocks": [2, "always"],         // require or disallow space before blocks (off by default)
        "space-before-function-paren": [2, "never"], // require or disallow space before function opening parenthesis (off by default)
        "space-in-parens": [2, "never"],             // require or disallow spaces inside parentheses (off by default)
        "spaced-comment": [2, "always"],              // require or disallow a space immediately following the // or /* in a comment (off by default)
        "wrap-regex": 2,                  // require regex literals to be wrapped in parentheses (off by default)

        ////////// ECMAScript 6 //////////

        "arrow-spacing": [2, { "before": true, "after": true }], // require a space before and after arrow function
        "constructor-super": 2,      // verify super() callings in constructors (off by default)
        "generator-star-spacing": [2, { "before": true, "after": false }], // enforce the spacing around the * in generator functions (off by default)
        "no-this-before-super": 2,   // disallow to use this/super before super() calling in constructors (off by default)
        "no-var": 2,                 // require let or const instead of var (off by default)
        "object-shorthand": 0,       // require method and property shorthand syntax for object literals (off by default)
        "prefer-const": 0           // suggest using of const declaration for variables that are never modified after declared (off by default)

    }
}